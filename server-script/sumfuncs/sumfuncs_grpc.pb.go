// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package agg

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GRPCFuncsListClient is the client API for GRPCFuncsList service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GRPCFuncsListClient interface {
	Sum(ctx context.Context, in *SumArgs, opts ...grpc.CallOption) (*SumReturns, error)
}

type gRPCFuncsListClient struct {
	cc grpc.ClientConnInterface
}

func NewGRPCFuncsListClient(cc grpc.ClientConnInterface) GRPCFuncsListClient {
	return &gRPCFuncsListClient{cc}
}

func (c *gRPCFuncsListClient) Sum(ctx context.Context, in *SumArgs, opts ...grpc.CallOption) (*SumReturns, error) {
	out := new(SumReturns)
	err := c.cc.Invoke(ctx, "/proto.gRPCFuncsList/sum", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GRPCFuncsListServer is the server API for GRPCFuncsList service.
// All implementations must embed UnimplementedGRPCFuncsListServer
// for forward compatibility
type GRPCFuncsListServer interface {
	Sum(context.Context, *SumArgs) (*SumReturns, error)
	mustEmbedUnimplementedGRPCFuncsListServer()
}

// UnimplementedGRPCFuncsListServer must be embedded to have forward compatible implementations.
type UnimplementedGRPCFuncsListServer struct {
}

func (UnimplementedGRPCFuncsListServer) Sum(context.Context, *SumArgs) (*SumReturns, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sum not implemented")
}
func (UnimplementedGRPCFuncsListServer) mustEmbedUnimplementedGRPCFuncsListServer() {}

// UnsafeGRPCFuncsListServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GRPCFuncsListServer will
// result in compilation errors.
type UnsafeGRPCFuncsListServer interface {
	mustEmbedUnimplementedGRPCFuncsListServer()
}

func RegisterGRPCFuncsListServer(s grpc.ServiceRegistrar, srv GRPCFuncsListServer) {
	s.RegisterService(&GRPCFuncsList_ServiceDesc, srv)
}

func _GRPCFuncsList_Sum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SumArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCFuncsListServer).Sum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.gRPCFuncsList/sum",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCFuncsListServer).Sum(ctx, req.(*SumArgs))
	}
	return interceptor(ctx, in, info, handler)
}

// GRPCFuncsList_ServiceDesc is the grpc.ServiceDesc for GRPCFuncsList service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GRPCFuncsList_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.gRPCFuncsList",
	HandlerType: (*GRPCFuncsListServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "sum",
			Handler:    _GRPCFuncsList_Sum_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server-script/sumfuncs/sumfuncs.proto",
}
